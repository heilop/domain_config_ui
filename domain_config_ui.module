<?php

/**
 * @file
 * Allows saving of domain specific configuration through the UI.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_preprocess_page().
 */
function domain_config_ui_preprocess_page(&$variables) {
  if (!domain_config_ui_route_is_admin() || !domain_config_ui_route_is_allowed()) {
    return;
  }

  // Add domain switch form that will reload the page to top of content region.
  $form = \Drupal::formBuilder()->getForm('Drupal\domain_config_ui\Form\SwitchForm');
  $content = [
    'domain_config_ui_switch' => $form,
  ];

  $variables['page']['content'] = array_merge($content, $variables['page']['content']);

  // Add a message below the form showing the current domain.
  if ($warning_message = domain_config_ui_save_warning_message()) {
    $variables['page']['content']['domain_config_ui_switch_warning'] = $warning_message;
  }
}

/**
 * Implements hook_form_alter().
 */
function domain_config_ui_form_alter(array &$form, FormStateInterface $form_state) {
  // Only alter forms on an admin path which could have a config factory.
  if (!domain_config_ui_route_is_admin() || !domain_config_ui_form_is_allowed($form)) {
    return;
  }

  // Create fieldset to group domain fields.
  $form['domain_config_ui'] = [
    '#type' => 'fieldset',
    '#title' => 'Domain Configuration',
    '#weight' => -10,
  ];

  // Add domain switch select field.
  $selected_domain = \Drupal::service('domain_config_ui.manager')->getSelectedDomain();
  $form['domain_config_ui']['config_save_domain'] = [
    '#type' => 'select',
    '#title' => 'Domain',
    '#options' => array_merge(['' => 'All Domains'], \Drupal::service('domain.loader')->loadOptionsList()),
    '#default_value' => $selected_domain ? $selected_domain->id() : '',
    '#ajax' => [
      'callback' => 'domain_config_ui_domain_switch_form_callback',
    ],
  ];

  // Add language select field.
  $selected_language = \Drupal::service('domain_config_ui.manager')->getSelectedLanguage();
  $language_options = ['' => 'Default'];
  foreach (\Drupal::languageManager()->getLanguages() as $id => $language) {
    $language_options[$id] = $language->getName();
  }
  $form['domain_config_ui']['config_save_language'] = [
    '#type' => 'select',
    '#title' => 'Language',
    '#options' => $language_options,
    '#default_value' => $selected_language ? $selected_language->getId() : '',
    '#ajax' => [
      'callback' => 'domain_config_ui_domain_switch_form_callback',
    ],
  ];

  // Add a message below the form showing the current domain.
  if ($warning_message = domain_config_ui_save_warning_message()) {
    $form['domain_message'] = $warning_message;
  }
}

/**
 * Helper to generate the markup for the domain save warning message.
 */
function domain_config_ui_save_warning_message() {
  $selected_domain = \Drupal::service('domain_config_ui.manager')->getSelectedDomain();
  if ($selected_domain) {
    $selected_language = \Drupal::service('domain_config_ui.manager')->getSelectedLanguage();
    $message = new TranslatableMarkup('Configuration will be saved for @domain @language', [
      '@domain' => $selected_domain->label(),
      '@language' => $selected_language ? '(' . $selected_language->getName() . ')' : '',
    ]);
    return [
      '#markup' => new FormattableMarkup('<div class="messages messages--warning">@message</div>', [
        '@message' => $message,
      ]),
      '#weight' => 1000,
    ];
  }
}

/**
 * Checks if provided form can be used to save domain specific configuration.
 *
 * @param array $form
 *   The form array.
 *
 * @return bool
 *   TRUE if the form allows domain specific configuration. Otherwise, FALSE.
 */
function domain_config_ui_form_is_allowed(array $form) {
  $allowed = [
    'system_site_information_settings',
    'system_theme_settings',
  ];
  \Drupal::moduleHandler()->alter('domain_config_form_allowed', $allowed);
  return in_array($form['#form_id'], $allowed);
}

/**
 * Checks if provided path should have a domain switch form on top of the page.
 *
 * @return bool
 *   TRUE if domai switch should be added. Otherwise, FALSE.
 */
function domain_config_ui_route_is_allowed() {
  $allowed = [
    '/admin/appearance',
  ];
  \Drupal::moduleHandler()->alter('domain_config_route_allowed', $allowed);
  $route = \Drupal::routeMatch()->getRouteObject();
  return in_array($route->getPath(), $allowed);
}

/**
 * Checks if route is admin.
 *
 * @return bool
 *   TRUE if route is admin. Otherwise, FALSE.
 */
function domain_config_ui_route_is_admin() {
  $route = \Drupal::routeMatch()->getRouteObject();
  return \Drupal::service('router.admin_context')->isAdminRoute($route);
}

/**
 * AJAX callback to set the current domain.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state array.
 */
function domain_config_ui_domain_switch_form_callback(array $form, FormStateInterface $form_state) {
  // Switch the current domain.
  \Drupal::service('domain_config_ui.manager')->setSelectedDomain($form_state->getValue('config_save_domain'));

  // Switch the current language.
  \Drupal::service('domain_config_ui.manager')->setSelectedLanguage($form_state->getValue('config_save_language'));

  // Reset form with selected domain configuration.
  $form_state->setUserInput([]);
  $new_form = \Drupal::formBuilder()->rebuildForm($form['#form_id'], $form_state, $form);
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand('.' . str_replace('_', '-', $form['#form_id']), $new_form));
  return $response;
}
