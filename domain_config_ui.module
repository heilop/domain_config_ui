<?php

/**
 * @file
 * Allows saving of domain specific configuration through the UI.
 */

use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_preprocess_page().
 */
function domain_config_ui_preprocess_page(&$variables) {
  if (!domain_config_ui_route_is_admin()
    || !domain_config_ui_route_is_allowed()) {
    return;
  }

  // Add domain switch form that will reload the page to top of content region.
  $form = \Drupal::formBuilder()
    ->getForm('Drupal\domain_config_ui\Form\SwitchForm');
  $content = ['domain_config_ui_switch' => $form];

  $variables['page']['content'] = array_merge($content, $variables['page']['content']);

  // Add a message below the form showing the current domain.
  if ($warning_message = domain_config_ui_save_warning_message()) {
    $variables['page']['content']['domain_config_ui_switch_warning'] = $warning_message;
  }
}

/**
 * Helper to generate the markup for the domain save warning message.
 */
function domain_config_ui_save_warning_message() {
  $selected_domain_id = \Drupal::service('domain_config_ui.manager')
    ->getSelectedDomainId();
  $selected_domain = \Drupal::service('entity_type.manager')
    ->getStorage('domain')
    ->load($selected_domain_id);
  if ($selected_domain) {
    $selected_language_id = \Drupal::service('domain_config_ui.manager')
      ->getSelectedLanguageId();
    $selected_language = \Drupal::service('language_manager')
      ->getLanguage($selected_language_id);
    $message = new TranslatableMarkup('Configuration will be saved for @domain @language', [
      '@domain' => $selected_domain->label(),
      '@language' => $selected_language ? '(' . $selected_language->getName() . ')' : '',
    ]);
    return [
      '#markup' => new FormattableMarkup('<div class="messages messages--warning">@message</div>', [
        '@message' => $message,
      ]),
      '#weight' => 1000,
    ];
  }
}

/**
 * Checks if provided path should have a domain switch form on top of the page.
 *
 * @return bool
 *   TRUE if domain switch should be added. Otherwise, FALSE.
 */
function domain_config_ui_route_is_allowed() {
  $path_pages = \Drupal::config('domain_config_ui.settings')->get('path_pages');
  $path_negate = \Drupal::config('domain_config_ui.settings')->get('path_negate');
  $route = \Drupal::routeMatch()->getRouteObject();
  return !$path_negate === \Drupal::service('path.matcher')->matchPath($route->getPath(), $path_pages);
}

/**
 * Checks if route is admin.
 *
 * @return bool
 *   TRUE if route is admin. Otherwise, FALSE.
 */
function domain_config_ui_route_is_admin() {
  $route = \Drupal::routeMatch()->getRouteObject();
  return \Drupal::service('router.admin_context')->isAdminRoute($route);
}
